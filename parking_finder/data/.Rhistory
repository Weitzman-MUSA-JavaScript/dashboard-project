})
)
return(time_str)
}
# Vectorized function to standardize days format
standardize_days <- function(days_str) {
# Return NA for NA inputs
if (all(is.na(days_str))) return(days_str)
# Vectorized operations
days_str <- ifelse(is.na(days_str), NA,
sapply(days_str, function(x) {
if (is.na(x)) return(NA)
# Convert to title case for consistency
x <- str_to_title(tolower(x))
# Handle special cases with "1ST"
x <- str_replace(x, "1st", "First")
# Standardize separators
x <- str_replace_all(x, " & | And ", " and ")
return(x)
})
)
return(days_str)
}
# Clean the data
park_days_clean <- park_days %>%
mutate(
# Clean time format
noparktime = standardize_time(noparktime),
# Clean days format
noparkdays = standardize_days(noparkdays)
) %>%
# Split into multiple rows if there are multiple time ranges
mutate(time_ranges = str_split(noparktime, "\\|")) %>%
unnest(time_ranges) %>%
# Create separate columns for start and end times
separate(time_ranges,
into = c("time_start", "time_end"),
sep = "-",
remove = FALSE)
View(park_days_clean)
park_days_structured <- park_days_clean %>%
mutate(
# Convert time_start and time_end to standardized 24-hour format
time_start = str_replace(time_start, "am", " AM") %>%
str_replace("pm", " PM") %>%
format(strptime(., format = "%I:%M %p"), format = "%H:%M"),
time_end = str_replace(time_end, "am", " AM") %>%
str_replace("pm", " PM") %>%
format(strptime(., format = "%I:%M %p"), format = "%H:%M")
) %>%
# Expand day ranges into individual days
separate_rows(noparkdays, sep = "-") %>%
# Clean up any resulting spaces
mutate(noparkdays = str_trim(noparkdays))
park_days_structured <- park_days_clean %>%
mutate(
# First standardize the format of AM/PM
time_start = str_replace(time_start, " am|am", " AM") %>%
str_replace(" pm|pm", " PM"),
time_end = str_replace(time_end, " am|am", " AM") %>%
str_replace(" pm|pm", " PM")
)
View(park_days_structured)
park_days_pivoted <- park_days_clean %>%
# Ensure days are standardized to short forms
mutate(
noparkdays = toupper(str_trim(noparkdays)),
# Create consistent column names
day = case_when(
str_detect(noparkdays, "MON") ~ "MON",
str_detect(noparkdays, "TUES") ~ "TUE",
str_detect(noparkdays, "WED") ~ "WED",
str_detect(noparkdays, "THUR") ~ "THU",
str_detect(noparkdays, "FRI") ~ "FRI",
str_detect(noparkdays, "SAT") ~ "SAT",
str_detect(noparkdays, "SUN") ~ "SUN"
)
) %>%
# Keep only relevant columns
select(day, time_start, time_end, n) %>%
# Group by day and combine time ranges
group_by(day) %>%
summarise(
nopark_times = paste(paste(time_start, time_end, sep = "-"), collapse = ";")
) %>%
# Pivot to wide format
pivot_wider(
names_from = day,
values_from = nopark_times
)
View(park_days_pivoted)
park_days_clean <- park_days_clean %>%
select(-pkgenday, -enbegin, -enend, -time_start, -time_end)
park_days_clean <- park_days_clean %>%
select(-pkgenday, -enbegin, -enend, -time_start, -time_end, -time_ranges)
# Clean the data
park_days_clean <- park_days %>%
mutate(
# Clean time format
noparktime = standardize_time(noparktime),
# Clean days format
noparkdays = standardize_days(noparkdays)
) %>%
# Split into multiple rows if there are multiple time ranges
mutate(time_ranges = str_split(noparktime, "\\|")) %>%
unnest(time_ranges) %>%
# Create separate columns for start and end times
separate(time_ranges,
into = c("time_start", "time_end"),
sep = "-",
remove = FALSE)
park_days_clean <- park_days_clean %>%
select(-pkgenday, -enbegin, -enend, -time_start, -time_end, -time_ranges)
table(park_days_clean)
summarise(park_days_clean)
summarise(unique(park_days_clean))
park_days_clean <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "Mon" ~ "MON",
noparkdays == "Tues" ~ "TUE",
noparkdays == "Wed" ~ "WED",
noparkdays == "Thur" ~ "THU",
noparkdays == "First Thur" ~ "FIRST_THU",
noparkdays == "First Tues" ~ "FIRST_TUE",
noparkdays == "First Wed" ~ "FIRST_WED",
noparkdays == "Fri-Sun" ~ "FRI,SAT,SUN",
noparkdays == "Mon-Fri" ~ "MON,TUE,WED,THU,FRI",
noparkdays == "Mon-Sat" ~ "MON,TUE,WED,THU,FRI,SAT",
noparkdays == "Mon-Sat and Fri-Sun" ~ "MON,TUE,WED,THU,FRI,SAT,SUN",
noparkdays == "Sat-Sun" ~ "SAT,SUN",
noparkdays == "Sun-Sat" ~ "SUN,MON,TUE,WED,THU,FRI,SAT",
TRUE ~ noparkdays
))
# Step 2: Expand the days into separate rows
park_days_clean <- park_days_clean %>%
separate_rows(noparkdays, sep = ",") %>%
# Remove any NA values from the separation
filter(!is.na(noparkdays))
# Step 3: Standardize the time format (assuming you want to keep the time restrictions)
park_days_clean <- park_days_clean %>%
mutate(
noparktime = case_when(
!is.na(noparktime) ~ noparktime,
!is.na(pkgswbeg) & !is.na(pkgswend) ~ paste(pkgswbeg, "-", pkgswend),
TRUE ~ NA_character_
)
)
park_days<- on_street %>%
mutate(noparkdays = case_when(!is.na(noparkdays) ~ noparkdays,
!is.na(pkgsday) ~ pkgsday,
TRUE ~ noparkdays))
View(park_days)
park_days <- park_days %>%
mutate(noparktime = case_when(
!is.na(noparktime) ~ noparktime,
!is.na(pkgswbeg) ~ paste(pkgswbeg, "-", pkgswend),
TRUE ~ noparktime
))
park_days <- park_days %>%
select(-pkgsday, -pkgswbeg, -pkgswend, -parkmob, -tmstrcn, -aorp)
standardize_time <- function(time_str) {
# Return NA for NA inputs
if (all(is.na(time_str))) return(time_str)
# Vectorized operations
time_str <- ifelse(is.na(time_str), NA,
sapply(time_str, function(x) {
if (is.na(x)) return(NA)
# Replace "Midnight" with "12:00 am"
x <- str_replace(x, "Midnight", "12:00 am")
# Standardize format: remove extra spaces, convert to lowercase
x <- str_trim(tolower(x))
# Handle multiple time ranges
x <- str_replace_all(x, " and | & ", "|")
# Remove any spaces around hyphens
x <- str_replace_all(x, "\\s*-\\s*", "-")
return(x)
})
)
return(time_str)
}
# Vectorized function to standardize days format
standardize_days <- function(days_str) {
# Return NA for NA inputs
if (all(is.na(days_str))) return(days_str)
# Vectorized operations
days_str <- ifelse(is.na(days_str), NA,
sapply(days_str, function(x) {
if (is.na(x)) return(NA)
# Convert to title case for consistency
x <- str_to_title(tolower(x))
# Handle special cases with "1ST"
x <- str_replace(x, "1st", "First")
# Standardize separators
x <- str_replace_all(x, " & | And ", " and ")
return(x)
})
)
return(days_str)
}
# Clean the data
park_days_clean <- park_days %>%
mutate(
# Clean time format
noparktime = standardize_time(noparktime),
# Clean days format
noparkdays = standardize_days(noparkdays)
) %>%
# Split into multiple rows if there are multiple time ranges
mutate(time_ranges = str_split(noparktime, "\\|")) %>%
unnest(time_ranges) %>%
# Create separate columns for start and end times
separate(time_ranges,
into = c("time_start", "time_end"),
sep = "-",
remove = FALSE)
park_days_clean <- park_days_clean %>%
select(-pkgenday, -enbegin, -enend, -time_start, -time_end, -time_ranges)
park_days_clean <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "Mon" ~ "MON",
noparkdays == "Tues" ~ "TUE",
noparkdays == "Wed" ~ "WED",
noparkdays == "Thur" ~ "THU",
noparkdays == "First Thur" ~ "FIRST_THU",
noparkdays == "First Tues" ~ "FIRST_TUE",
noparkdays == "First Wed" ~ "FIRST_WED",
noparkdays == "Fri-Sun" ~ "FRI,SAT,SUN",
noparkdays == "Mon-Fri" ~ "MON,TUE,WED,THU,FRI",
noparkdays == "Mon-Sat" ~ "MON,TUE,WED,THU,FRI,SAT",
noparkdays == "Mon-Sat and Fri-Sun" ~ "MON,TUE,WED,THU,FRI,SAT,SUN",
noparkdays == "Sat-Sun" ~ "SAT,SUN",
noparkdays == "Sun-Sat" ~ "SUN,MON,TUE,WED,THU,FRI,SAT",
TRUE ~ noparkdays
))
# Step 2: Expand the days into separate rows
park_days_clean <- park_days_clean %>%
separate_rows(noparkdays, sep = ",") %>%
# Remove any NA values from the separation
filter(!is.na(noparkdays))
park_days<- on_street %>%
mutate(noparkdays = case_when(!is.na(noparkdays) ~ noparkdays,
!is.na(pkgsday) ~ pkgsday,
TRUE ~ noparkdays))
park_days <- park_days %>%
mutate(noparktime = case_when(
!is.na(noparktime) ~ noparktime,
!is.na(pkgswbeg) ~ paste(pkgswbeg, "-", pkgswend),
TRUE ~ noparktime
))
park_days <- park_days %>%
select(-pkgsday, -pkgswbeg, -pkgswend, -parkmob, -tmstrcn, -aorp)
standardize_time <- function(time_str) {
# Return NA for NA inputs
if (all(is.na(time_str))) return(time_str)
# Vectorized operations
time_str <- ifelse(is.na(time_str), NA,
sapply(time_str, function(x) {
if (is.na(x)) return(NA)
# Replace "Midnight" with "12:00 am"
x <- str_replace(x, "Midnight", "12:00 am")
# Standardize format: remove extra spaces, convert to lowercase
x <- str_trim(tolower(x))
# Handle multiple time ranges
x <- str_replace_all(x, " and | & ", "|")
# Remove any spaces around hyphens
x <- str_replace_all(x, "\\s*-\\s*", "-")
return(x)
})
)
return(time_str)
}
# Vectorized function to standardize days format
standardize_days <- function(days_str) {
# Return NA for NA inputs
if (all(is.na(days_str))) return(days_str)
# Vectorized operations
days_str <- ifelse(is.na(days_str), NA,
sapply(days_str, function(x) {
if (is.na(x)) return(NA)
# Convert to title case for consistency
x <- str_to_title(tolower(x))
# Handle special cases with "1ST"
x <- str_replace(x, "1st", "First")
# Standardize separators
x <- str_replace_all(x, " & | And ", " and ")
return(x)
})
)
return(days_str)
}
# Clean the data
park_days_clean <- park_days %>%
mutate(
# Clean time format
noparktime = standardize_time(noparktime),
# Clean days format
noparkdays = standardize_days(noparkdays)
) %>%
# Split into multiple rows if there are multiple time ranges
mutate(time_ranges = str_split(noparktime, "\\|")) %>%
unnest(time_ranges) %>%
# Create separate columns for start and end times
separate(time_ranges,
into = c("time_start", "time_end"),
sep = "-",
remove = FALSE)
park_days_clean <- park_days_clean %>%
select(-pkgenday, -enbegin, -enend, -time_start, -time_end, -time_ranges)
park_days_clean <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "Mon" ~ "MON",
noparkdays == "Tues" ~ "TUE",
noparkdays == "Wed" ~ "WED",
noparkdays == "Thur" ~ "THU",
noparkdays == "First Thur" ~ "FIRST_THU",
noparkdays == "First Tues" ~ "FIRST_TUE",
noparkdays == "First Wed" ~ "FIRST_WED",
noparkdays == "Fri-Sun" ~ "FRI,SAT,SUN",
noparkdays == "Mon-Fri" ~ "MON,TUE,WED,THU,FRI",
noparkdays == "Mon-Sat" ~ "MON,TUE,WED,THU,FRI,SAT",
noparkdays == "Mon-Sat and Fri-Sun" ~ "MON,TUE,WED,THU,FRI,SAT,SUN",
noparkdays == "Sat-Sun" ~ "SAT,SUN",
noparkdays == "Sun-Sat" ~ "SUN,MON,TUE,WED,THU,FRI,SAT",
TRUE ~ noparkdays
))
# Step 2: Expand the days into separate rows
park_days_clean <- park_days_clean %>%
separate_rows(noparkdays, sep = ",")
st_write(park_days_clean, "clean_parking.geojson", append = TRUE)
source("~/Documents/dashboard-project/parking_finder/data/data_manipulation.R")
library(pacman)
library(pacman)
p_load(tidyverse, sf, janitor)
st_transform(park_days_clean, 4326)
park_days_ckean <- st_transform(4326)
park_days_ckean <- park_days_ckean %>%
st_transform(4326)
park_days_ckean <- park_days_clean %>%
st_transform(4326)
park_days_clean <- park_days_clean %>%
st_transform(4326)
st_write(park_days_clean, "clean_parking.geojson", append = TRUE)
source("~/Documents/dashboard-project/parking_finder/data/data_manipulation.R")
library(pacman)
p_load(tidyverse, sf, janitor)
unique(park_days_clean$noparkdays)
park_days_time <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "MON" ~ 1,
noparkdays == "TUE" ~ 2,
noparkdays == "WED" ~ 3,
noparkdays == "THU" ~ 4,
noparkdays == "FRI" ~ 5,
noparkdays == "SAT" ~ 6,
noparkdays == "FIRST_WED" ~ 3,
noparkdays == "FIRST_THU" ~ 4,
noparkdays == "FIRST_TUE" ~ 3,
noparkdays == "SUN" ~ 0,
))
park_days_clean <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "MON" ~ 1,
noparkdays == "TUE" ~ 2,
noparkdays == "WED" ~ 3,
noparkdays == "THU" ~ 4,
noparkdays == "FRI" ~ 5,
noparkdays == "SAT" ~ 6,
noparkdays == "FIRST_WED" ~ 3,
noparkdays == "FIRST_THU" ~ 4,
noparkdays == "FIRST_TUE" ~ 3,
noparkdays == "SUN" ~ 0,
))
st_write(park_days_clean, "clean_parking.geojson", append = TRUE)
park_days_clean <- park_days_clean %>%
mutate(noparktime = str_trim(noparktime)) %>%
separate(noparktime, into = c("start_time", "end_time"), sep = "-", remove = FALSE) %>%
mutate(
start_time = str_trim(start_time),
end_time = str_trim(end_time),
# Convert directly using strptime which is more forgiving
start_time = format(strptime(start_time, format = "%I%p"), format = "%H:%M"),
end_time = format(strptime(end_time, format = "%I%p"), format = "%H:%M")
)
park_days_clean <- park_days %>%
mutate(
# Clean time format
noparktime = standardize_time(noparktime),
# Clean days format
noparkdays = standardize_days(noparkdays)
) %>%
# Split into multiple rows if there are multiple time ranges
mutate(time_ranges = str_split(noparktime, "\\|")) %>%
unnest(time_ranges) %>%
# Create separate columns for start and end times
separate(time_ranges,
into = c("time_start", "time_end"),
sep = "-",
remove = FALSE)
park_days_clean <- park_days_clean %>%
select(-pkgenday, -enbegin, -enend, -time_start, -time_end, -time_ranges)
park_days_clean <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "Mon" ~ "MON",
noparkdays == "Tues" ~ "TUE",
noparkdays == "Wed" ~ "WED",
noparkdays == "Thur" ~ "THU",
noparkdays == "First Thur" ~ "FIRST_THU",
noparkdays == "First Tues" ~ "FIRST_TUE",
noparkdays == "First Wed" ~ "FIRST_WED",
noparkdays == "Fri-Sun" ~ "FRI,SAT,SUN",
noparkdays == "Mon-Fri" ~ "MON,TUE,WED,THU,FRI",
noparkdays == "Mon-Sat" ~ "MON,TUE,WED,THU,FRI,SAT",
noparkdays == "Mon-Sat and Fri-Sun" ~ "MON,TUE,WED,THU,FRI,SAT,SUN",
noparkdays == "Sat-Sun" ~ "SAT,SUN",
noparkdays == "Sun-Sat" ~ "SUN,MON,TUE,WED,THU,FRI,SAT",
TRUE ~ noparkdays
))
# Step 2: Expand the days into separate rows
park_days_clean <- park_days_clean %>%
separate_rows(noparkdays, sep = ",")
park_days_clean <- park_days_clean %>%
st_transform(4326)
park_days_clean <- park_days_clean %>%
select(-noparktime)
# To unnest the split values into separate rows
park_days_clean <- park_days_clean %>%
mutate(noparktime = str_split(noparktime, "\\|")) %>%
unnest(noparktime)
park_days_clean <- park_days %>%
mutate(
# Clean time format
noparktime = standardize_time(noparktime),
# Clean days format
noparkdays = standardize_days(noparkdays)
) %>%
# Split into multiple rows if there are multiple time ranges
mutate(time_ranges = str_split(noparktime, "\\|")) %>%
unnest(time_ranges) %>%
# Create separate columns for start and end times
separate(time_ranges,
into = c("time_start", "time_end"),
sep = "-",
remove = FALSE)
park_days_clean <- park_days_clean %>%
select(-pkgenday, -enbegin, -enend, -time_start, -time_end, -time_ranges)
park_days_clean <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "Mon" ~ "MON",
noparkdays == "Tues" ~ "TUE",
noparkdays == "Wed" ~ "WED",
noparkdays == "Thur" ~ "THU",
noparkdays == "First Thur" ~ "FIRST_THU",
noparkdays == "First Tues" ~ "FIRST_TUE",
noparkdays == "First Wed" ~ "FIRST_WED",
noparkdays == "Fri-Sun" ~ "FRI,SAT,SUN",
noparkdays == "Mon-Fri" ~ "MON,TUE,WED,THU,FRI",
noparkdays == "Mon-Sat" ~ "MON,TUE,WED,THU,FRI,SAT",
noparkdays == "Mon-Sat and Fri-Sun" ~ "MON,TUE,WED,THU,FRI,SAT,SUN",
noparkdays == "Sat-Sun" ~ "SAT,SUN",
noparkdays == "Sun-Sat" ~ "SUN,MON,TUE,WED,THU,FRI,SAT",
TRUE ~ noparkdays
))
# Step 2: Expand the days into separate rows
park_days_clean <- park_days_clean %>%
separate_rows(noparkdays, sep = ",")
park_days_clean <- park_days_clean %>%
st_transform(4326)
# To unnest the split values into separate rows
park_days_clean <- park_days_clean %>%
mutate(noparktime = str_split(noparktime, "\\|")) %>%
unnest(noparktime)
park_days_clean <- park_days_clean %>%
mutate(noparktime = str_trim(noparktime)) %>%
separate(noparktime, into = c("start_time", "end_time"), sep = "-", remove = FALSE) %>%
mutate(
start_time = str_trim(start_time),
end_time = str_trim(end_time),
# Convert directly using strptime which is more forgiving
start_time = format(strptime(start_time, format = "%I%p"), format = "%H:%M"),
end_time = format(strptime(end_time, format = "%I%p"), format = "%H:%M")
)
unique(park_days_clean$noparkdays)
park_days_clean <- park_days_clean %>%
mutate(noparkdays = case_when(
noparkdays == "MON" ~ 1,
noparkdays == "TUE" ~ 2,
noparkdays == "WED" ~ 3,
noparkdays == "THU" ~ 4,
noparkdays == "FRI" ~ 5,
noparkdays == "SAT" ~ 6,
noparkdays == "FIRST_WED" ~ 3,
noparkdays == "FIRST_THU" ~ 4,
noparkdays == "FIRST_TUE" ~ 3,
noparkdays == "SUN" ~ 0,
))
park_days_clean <- park_days_clean %>%
select(-noparktime)
st_write(park_days_clean, "clean_parking.geojson", append = TRUE)
plot(park_days_clean$noparkdays)
p_load(ggplot2)
ggplot()+
geom_sf(park_days_clean, aes(col = noparkday))
ggplot()+
geom_sf(park_days_clean, aes(col = noparkdays))
ggplot(data = park_days_clean) +
geom_sf(aes(col = noparkdays)) +
scale_color_viridis_c() + # Adds a continuous color scale (optional)
theme_minimal() + # Optional: A minimal theme
labs(color = "No. of Park Days",
title = "Park Days Visualization",
caption = "Source: park_days_clean dataset")
source("~/Documents/dashboard-project/parking_finder/data/data_manipulation.R")
